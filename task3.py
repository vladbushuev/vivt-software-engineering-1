# Определение класса Stack для реализации стека
class Stack:
    def __init__(self):
        """
        Конструктор класса Stack.
        Инициализирует пустой стек и переменную состояния.
        """
        self.container = []  # Инициализируем список для хранения элементов стека
        self.state = 0  # Инициализируем переменную состояния (0 - без ошибок)

    def push(self, element):
        """
        Вставляет элемент в вершину стека.

        :param element: Элемент, который нужно добавить в стек.
        """
        try:
            self.container.append(element)  # Добавляем элемент в конец списка (вершина стека)
            self.state = 0  # Сбрасываем код ошибки
        except Exception as e:
            self.state = 1  # Устанавливаем код ошибки при возникновении исключения
            print(f"Ошибка при добавлении элемента: {e}")  # Выводим сообщение об ошибке

    def pop(self):
        """
        Удаляет и возвращает элемент из вершины стека.

        :return: Удаленный элемент или None, если стек пуст.
        """
        if not self.is_empty():  # Проверяем, не пуст ли стек
            try:
                element = self.container.pop()  # Удаляем последний элемент из списка
                self.state = 0  # Сбрасываем код ошибки
                return element  # Возвращаем удаленный элемент
            except Exception as e:
                self.state = 1  # Устанавливаем код ошибки при возникновении исключения
                print(f"Ошибка при удалении элемента: {e}")  # Выводим сообщение об ошибке
                return None  # Возвращаем None в случае ошибки
        else:
            self.state = 2  # Устанавливаем код ошибки при попытке удалить элемент из пустого стека
            print("Ошибка: попытка удаления элемента из пустого стека.")  # Выводим сообщение об ошибке
            return None  # Возвращаем None, так как стек пуст

    def peek(self):
        """
        Возвращает элемент из вершины стека без его удаления.

        :return: Элемент из вершины стека или None, если стек пуст.
        """
        if not self.is_empty():  # Проверяем, не пуст ли стек
            try:
                element = self.container[-1]  # Получаем последний элемент списка без его удаления
                self.state = 0  # Сбрасываем код ошибки
                return element  # Возвращаем элемент
            except Exception as e:
                self.state = 1  # Устанавливаем код ошибки при возникновении исключения
                print(f"Ошибка при просмотре верхнего элемента: {e}")  # Выводим сообщение об ошибке
                return None  # Возвращаем None в случае ошибки
        else:
            self.state = 2  # Устанавливаем код ошибки при попытке просмотреть элемент из пустого стека
            print("Ошибка: стек пуст.")  # Выводим сообщение об ошибке
            return None  # Возвращаем None, так как стек пуст

    def is_empty(self):
        """
        Проверяет, является ли стек пустым.

        :return: True, если стек пуст, иначе False.
        """
        return len(self.container) == 0  # Возвращаем True, если длина списка равна нулю

    def size(self):
        """
        Возвращает количество элементов в стеке.

        :return: Количество элементов в стеке.
        """
        return len(self.container)  # Возвращаем длину списка, представляющего стек

    def print_stack(self):
        """
        Печатает элементы стека от основания до вершины.
        """
        print("Stack elements (основание -> вершина):", self.container)  # Выводим список элементов стека

    def __str__(self):
        """
        Возвращает строковое представление стека.

        :return: Строка с элементами стека и текущим состоянием.
        """
        return f"Stack(container={self.container}, state={self.state})"  # Формируем строковое представление


# Функция для проверки работы класса Stack
def test_stack():
    # Создаем новый стек
    stack = Stack()
    print("Создан новый стек:", stack)  # Выводим состояние стека

    # Проверяем, пуст ли стек
    print("Стек пуст?", stack.is_empty())  # Ожидается: True

    # Пытаемся получить верхний элемент из пустого стека
    top_element = stack.peek()  # Ожидается: None с установкой state = 2
    print("Верхний элемент стека:", top_element)
    print("Состояние стека:", stack.state)  # Ожидается: 2

    # Добавляем элементы в стек
    stack.push(10)
    print("После добавления 10:", stack)
    stack.push(20)
    print("После добавления 20:", stack)
    stack.push(30)
    print("После добавления 30:", stack)

    # Проверяем размер стека
    print("Размер стека:", stack.size())  # Ожидается: 3

    # Получаем верхний элемент без удаления
    top_element = stack.peek()  # Ожидается: 30
    print("Верхний элемент стека:", top_element)
    print("Состояние стека:", stack.state)  # Ожидается: 0

    # Удаляем элементы из стека
    popped_element = stack.pop()  # Ожидается: 30
    print("Удаленный элемент:", popped_element)
    print("Стек после удаления:", stack)

    popped_element = stack.pop()  # Ожидается: 20
    print("Удаленный элемент:", popped_element)
    print("Стек после удаления:", stack)

    # Печатаем все элементы стека
    stack.print_stack()  # Ожидается: [10]

    # Удаляем последний элемент
    popped_element = stack.pop()  # Ожидается: 10
    print("Удаленный элемент:", popped_element)
    print("Стек после удаления:", stack)

    # Пытаемся удалить элемент из пустого стека
    popped_element = stack.pop()  # Ожидается: None с установкой state = 2
    print("Удаленный элемент:", popped_element)
    print("Состояние стека:", stack.state)  # Ожидается: 2

    # Добавляем элемент после очистки стека
    stack.push(40)
    print("После добавления 40:", stack)

    # Печатаем окончательное состояние стека
    stack.print_stack()

    # Печатаем строковое представление стека
    print("Строковое представление стека:", stack)


# Запуск функции тестирования
if __name__ == "__main__":
    test_stack()
